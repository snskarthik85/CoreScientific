{
	"name": "OrderBook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Production",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "33dd34c1-f81e-4507-83c0-3e660ecc1682"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/97a22587-99c2-4a30-9550-c894beba641f/resourceGroups/CoreScientific/providers/Microsoft.Synapse/workspaces/cryptowork/bigDataPools/Production",
				"name": "Production",
				"type": "Spark",
				"endpoint": "https://cryptowork.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Production",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import coinbasepro as cbp\n",
					"from notebookutils import mssparkutils\n",
					"import asyncio\n",
					"from azure.eventhub import EventData\n",
					"from azure.eventhub.aio import EventHubProducerClient\n",
					"from azure.identity import DefaultAzureCredential\n",
					"import pandas as pd\n",
					"from datetime import datetime\n",
					"import json"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"coinbaseClient = cbp.PublicClient()"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"async def PushToEventHub(df):\n",
					"    EVENT_HUB_CONNECTION_STR = mssparkutils.credentials.getSecret('azurecryptokv','EventHubconnectionString', 'AzureKeyVault')\n",
					"    EVENT_HUB_NAME = \"cryptoeventhub\"\n",
					"    \n",
					"    async def SendEventsToHub():\n",
					"      \n",
					"        # Create a producer client to send messages to the event hub.\n",
					"        producer = EventHubProducerClient.from_connection_string(\n",
					"            conn_str=EVENT_HUB_CONNECTION_STR, eventhub_name=EVENT_HUB_NAME\n",
					"        )\n",
					"\n",
					"        async with producer:\n",
					"            # Create a batch.\n",
					"            event_data_batch = await producer.create_batch()\n",
					"\n",
					"            for index, row in df.iterrows():\n",
					"    \n",
					"                json_obj = {\n",
					"                    \"BidPrice\" : row['Bid Price'],\n",
					"                    \"BidSize\" : row['Bid Size'],\n",
					"                    \"BidAmount\" : row['Bid Amount'],\n",
					"                    \"AskPrice\" : row['Ask Price'],\n",
					"                    \"AskSize\" : row['Ask Size'],\n",
					"                    \"AskAmount\" : row['Ask Amount'],\n",
					"                    \"Product\": row['Product'],\n",
					"                    \"BidTotal\": row['BidTotal'],\n",
					"                    \"AskTotal\": row['AskTotal'],\n",
					"                    \"PollTime\": row['PollTime'],\n",
					"                    \"BidCumSum\": row['BidCumSum'],\n",
					"                    \"AskCumSum\": row['AskCumSum']\n",
					"                }\n",
					"\n",
					"                string = json.dumps(json_obj)\n",
					"                \n",
					"                print(string)\n",
					"\n",
					"                Event_data = EventData(body=string)\n",
					"                \n",
					"                Event_data.properties = {\n",
					"                    \"Table\":\"CryptoOrderBookAsksBids\",\n",
					"                    \"IngestionMappingReference\":\"CryptoOrderBookAsksBidsMapping\", \n",
					"                    \"Format\":\"json\"\n",
					"                    }\n",
					"\n",
					"                # Add events to the batch.\n",
					"                event_data_batch.add(Event_data)\n",
					"        \n",
					"            # Send the batch of events to the event hub.\n",
					"            await producer.send_batch(event_data_batch)\n",
					"\n",
					"    await SendEventsToHub()\n",
					"    "
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"products = [\"BTC-USD\", \"ETH-USD\"]\n",
					"polltime = datetime.utcnow().strftime(\"%d/%m/%Y %H:%M:%S\")\n",
					"for product in products:\n",
					"    order_book = coinbaseClient.get_product_order_book(product, level = 2)\n",
					"    bids = pd.DataFrame(order_book['bids'])\n",
					"    asks = pd.DataFrame(order_book['asks'])\n",
					"    df = pd.merge(bids, asks, left_index=True, right_index=True)\n",
					"    df = df.rename({\"0_x\":\"Bid Price\",\"1_x\":\"Bid Size\", \"2_x\":\"Bid Amount\",\n",
					"                \"0_y\":\"Ask Price\",\"1_y\":\"Ask Size\", \"2_y\":\"Ask Amount\"}, axis='columns')\n",
					"    df.insert(6, \"Product\", product)\n",
					"    df.insert(7, \"BidTotal\", df['Bid Price'].astype(float) * df['Bid Size'].astype(float) * df['Bid Amount'].astype(float))\n",
					"    df.insert(8, \"AskTotal\", df['Ask Price'].astype(float) * df['Ask Size'].astype(float) * df['Ask Amount'].astype(float))\n",
					"    df.insert(9, \"PollTime\", polltime)\n",
					"    df['BidCumSum'] = df['BidTotal'].cumsum()\n",
					"    df['AskCumSum'] = df['AskTotal'].cumsum()\n",
					"    df = df.where((df['AskCumSum'] <= 100_000) | (df['BidCumSum'] <= 100_000)).dropna()\n",
					"    df = df.astype({\"Bid Price\": float, \"Bid Size\": float, \"Bid Amount\" : float, \"Ask Price\": float, \"Ask Size\": float, \"Ask Amount\" : float, \"BidTotal\" : float, \"AskTotal\" : float, \"BidCumSum\" : float, \"AskCumSum\" : float})\n",
					"    await PushToEventHub(df)"
				],
				"execution_count": 7
			}
		]
	}
}